generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model dependency {
  id           Int                       @id @default(autoincrement())
  name         municipal_dependency_enum
  is_operating Boolean?                  @default(false)
  issue        issue[]
  works_at     works_at[]
}

model issue {
  id            Int         @id @default(autoincrement())
  description   String
  code          String
  enabled       Boolean
  dependency_id Int?
  dependency    dependency? @relation(fields: [dependency_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ticket        ticket[]
}

model penalty_type {
  id           Int            @id @default(autoincrement())
  code         String
  description  String
  user_penalty user_penalty[]
}

model priority {
  id               Int                 @id @default(autoincrement())
  description      priority_level_enum
  priority_history priority_history[]
}

model priority_history {
  id           Int           @id @default(autoincrement())
  author_id    String?       @db.Uuid
  ticket_id    String?       @db.Uuid
  priority_id  Int?
  its          DateTime?     @default(now()) @db.Timestamptz(6)
  user_account user_account? @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  priority     priority?     @relation(fields: [priority_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ticket       ticket?       @relation(fields: [ticket_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model role {
  id           Int            @id @default(autoincrement())
  description  role_enum
  user_account user_account[]
}

model status_history {
  id            Int           @id @default(autoincrement())
  author_id     String        @db.Uuid
  ticket_id     String        @db.Uuid
  status_id     Int
  its           DateTime      @default(now()) @db.Timestamptz(6)
  user_account  user_account  @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ticket_status ticket_status @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ticket        ticket        @relation(fields: [ticket_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model subscription {
  id           Int           @id @default(autoincrement())
  user_id      String?       @db.Uuid
  ticket_id    String?       @db.Uuid
  its          DateTime?     @default(now()) @db.Timestamptz(6)
  dts          DateTime?     @db.Timestamptz(6)
  ticket       ticket?       @relation(fields: [ticket_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_account user_account? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ticket {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description      String?            @db.VarChar(250)
  latitude         Float?
  longitude        Float?
  timestamp        DateTime           @db.Timestamp(6)
  image_url        String?
  issue_id         Int?
  its              DateTime?          @default(now()) @db.Timestamptz(6)
  uts              DateTime?          @db.Timestamptz(6)
  dts              DateTime?          @db.Timestamptz(6)
  priority_history priority_history[]
  status_history   status_history[]
  subscription     subscription[]
  issue            issue?             @relation(fields: [issue_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ticket_status {
  id             Int                @id @default(autoincrement())
  description    ticket_status_enum @unique
  status_history status_history[]
}

model user_account {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auth_provider_id String             @unique @db.Uuid
  dni              BigInt
  email            String
  email_alt        String?
  first_name       String
  last_name        String
  birth_date       DateTime           @db.Date
  postal_code      Int?
  street           String?
  street_number    Int?
  is_resident      Boolean?           @default(true)
  role_id          Int
  its              DateTime?          @default(now()) @db.Timestamp(6)
  uts              DateTime?          @db.Timestamp(6)
  dts              DateTime?          @db.Timestamp(6)
  priority_history priority_history[]
  status_history   status_history[]
  subscription     subscription[]
  role             role               @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_penalty     user_penalty[]
  works_at         works_at[]
}

model works_at {
  id            Int          @id @default(autoincrement())
  user_id       String       @db.Uuid
  dependency_id Int
  started       DateTime?    @db.Date
  ended         DateTime?    @db.Date
  dependency    dependency   @relation(fields: [dependency_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_account  user_account @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_penalty {
  id              Int           @id @default(autoincrement())
  penalty_type_id Int?
  date            DateTime      @db.Timestamp(6)
  user_id         String?       @db.Uuid
  penalty_type    penalty_type? @relation(fields: [penalty_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_account    user_account? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum municipal_dependency_enum {
  Arboldado_urbano                       @map("Arboldado urbano")
  Alumbrado_p_blico                      @map("Alumbrado público")
  Mantenimiento_de_cloaca_y_agua_potable @map("Mantenimiento de cloaca y agua potable")
  Recolecci_n_de_residuos                @map("Recolección de residuos")
  Liempieza_de_calles                    @map("Liempieza de calles")
  Distribuci_n_de_reigo_y_agua_potable   @map("Distribución de reigo y agua potable")
  Control_urbano_y_de_tr_nsito           @map("Control urbano y de tránsito")
  Veh_culos_abandonados                  @map("Vehículos abandonados")
  Conservaci_n_de_espacios_p_blicos      @map("Conservación de espacios públicos")
  Atenci_n_sanitaria_de_animales         @map("Atención sanitaria de animales")
  Control_industrial_y_de_plagas         @map("Control industrial y de plagas")
}

enum priority_level_enum {
  Muy_Alta @map("Muy Alta")
  Alta
  Media
  Baja
}

enum role_enum {
  Operador_de_Atenci_n_al_vecino @map("Operador de Atención al vecino")
  Ciudadano
  Responsable_de_dependencia     @map("Responsable de dependencia")
  Miembro_de_cuadrilla           @map("Miembro de cuadrilla")
}

enum ticket_status_enum {
  Pendiente
  V_lido      @map("Válido")
  Programada
  Resuelto
  Finalizado
  Cuestionada
  Rechazado
  Derivado
  Cancelado
}
